#include <iostream>
#include <vector>
using namespace std;

void vectorUnion(const vector<int> &v1, const vector<int> &v2, vector<int> &v3){
    for(int i=0;i<v1.size();i++){
        v3.push_back(v1[i]);
    }
    for(int i=0;i<v2.size();i++){
        v3.push_back(v2[i]);
    }
}

void vectorIntersection(const vector<int> &v1, const vector<int> &v2, vector<int> &v3){
    for (int i =0; i<v1.size();i++){
        for(int j=0; j<v1.size();j++){
            if (v1[i]==v2[j]){
                v3.push_back(v1[i]);
            }
        }
    }
}

void removeDuplicates(vector<int>&v){
    for (int i=0;i<v.size();i++){
        for (int j=i-1;j>=0;j--){
            if (v[i]==v[j]){
                for (int k=i+1; k<v.size(); k++) //isto puxa 'uma casa' para esquerda os elementos
					v[k-1] = v[k];
				v.resize(v.size()-1);
				i--; 
            }
        }
    }
}

void bubbleSort(vector<int>& v) {
	int first, second;
	for (int i=0; i<v.size(); i++) {
		for (int j=0; j<v.size()-1-i; j++) {
			first = v[j];
			second = v[j + 1];
			if (first > second) {
				v[j] = second;
				v[j+1] = first;
			}
		}
	}
}

int main(){
    vector<int>v1{4,2,3,5,6,6,7,8};
    vector<int>v2{2,1,0,4,6,7,8,3,11};
    vector<int>v3;
    
    vectorIntersection(v1,v2,v3);
    removeDuplicates(v3);
    bubbleSort(v3);
    
    for (int i=0; i<v3.size();i++){
        cout<<v3[i]<<", ";
    }

    return 0;
}